/*
Class Description: 
    - This class provides a helper method that allows the application to interact 
      with the Spotify Web API by acquiring an access token via Spotify's Client
      Credentials OAuth 2.0 flow authentication method.

    - This class also contains methods to retrive an an album, artist, and audiobook by 
      their name or ID.

Contributors: 
    - Keyvan M. Kani
    - MD Islam
*/

//Imports
import axios from 'axios'; //A JS library for making HTTP requests
import qs from 'qs';       /*A JS library to arrange/serialize JS objects into query strings so that 
                             the Spotify Web API can take in URL-encoded form data*/

/*Helper methods*/

/*A method that utilizes the Client Credentials Flow of Spotify's OAuth 2.0 to authenticate the 
application using its client credentials and retrieve an access token required for accessing 
Spotify's Web API.*/
export const getToken = async () => {
    /*Obtaining client's credentials 
        Note: This info was recieved when making the Spotify app on their developer website)*/
    const clientId = '70b48a4c6d1d43f5ad000d464a08027d';
    const clientSecret = 'e2e7ab1528674c478c56393c70be3009';

    try{
        //This URL is used for Spotify's token endpoint
        const tokenUrl = 'https://accounts.spotify.com/api/token';

        /*A variable that creates a POST request to the token's endpoint via axois so 
          that the program can obtain the access token
          
          The parameters of the POST request include:
            URL:    Where you're sending the request (endpoint)
            Data:   The type of data your sending
            Config: The information/settings (like headers) needed to complete the request*/
        const response = await axios.post
            (tokenUrl, qs.stringify({grant_type: 'client_credentials'}), {
                    headers: {
                            /*We utilize Buffer to encode the client's credentials so that Spotify can verify
                              that the program is requesting information from a verified app*/
                            'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                }
            );
    
        /*Utilizes the successful Promise (generated by axios) to obtain the access token from the 
          response.data JSON object, and returns it to be used by the other methods that are 
          requesting data from the Spotify Web API
          
          Note: An example of what the response.data JSON object might look like is this 
            {
                "access_token": "BQDg...abc123",
                "token_type": "Bearer",
                "expires_in": 3600
            }*/
        return response.data.access_token;
    }
    catch(error){
        console.error(`Error: ${error.message}`);
    }
    
};

/*Methods to search the API by keyword*/

//A method to get an Album as a JSON object by their name
export const getAlbumByName = async (accessToken, albumName) => {
    try{
        /*Since the program is searching an album by name, it uses the Spotify's search endpoint
          instead of the album endpoint*/
        const searchURL = 'https://api.spotify.com/v1/search';

        /*Offers a new concatonation of the search endpoint and access token to obtain a 
          successful Promise through a GET request*/
        const response = await axios.get
            (searchURL + '?q=' + albumName + '&type=album', {
                    headers: {
                        'Authorization': 'Bearer ' + accessToken,
                    }
                }
            );
        
        //Utilizes the Promise variable to return a specified set of album(s) by name as a JSON object
        return response.data;
    }
    catch(error){
        console.error(`Error: ${error.message}`);
    }
}

//A method to get an artist as a JSON object by their name
export const getArtistByName = async (accessToken, artistName) => {
    
}

//A method to get an audiobook as a JSON object by their name
export const getAudiobookByName = async (accessToken, audiobookName) => {
    
}

/*Methods to search the API by ID*/

//A method to get an album as a JSON object by their ID
export const getAlbumByID = async (accessToken, albumID) => {
    try{
        //This is the Spotify's URL for the albums endpoint
        const albumURL = 'https://api.spotify.com/v1/albums/';

        /*Offers the albums endpoint and access token to obtain a successful Promise 
          through a GET request*/
        const response = await axios.get
            (albumURL + albumID, {
                    headers: {
                        'Authorization': 'Bearer ' + accessToken,
                    }
                }
            );

        //Utilizes the Promise variable to return the specified album by ID as a JSON object
        return response.data;
    }
    catch(error){
        console.error(`Error: ${error.message}`);
    }
}

//A method to get an artist as a JSON object by their ID
export const getArtistByID = async (accessToken, artistID) => {
    
}

//A method to get an artist as a JSON object by their ID
export const getAudiobookByID = async (accessToken, audiobookID) => {
    
}